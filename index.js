const binance = require('node-binance-api');const listcoinBNB = require('./listcoinbinance');const BollingerBand = require('technicalindicators').BollingerBands;const RSI = require('technicalindicators').RSI;const R = require('ramda');const _ = require('lodash');const moment = require('moment');const TelegramBot = require('node-telegram-bot-api');const fs = require('fs');const Stochastic = require('technicalindicators').Stochastic;const StochasticRSI = require('technicalindicators').StochasticRSI;/** * Config bot telegram * @type {string} */const token = '472833515:AAGXIRPigpyRKgO1NfLCPXBJ3R-5twUKBNw';const bot = new TelegramBot(token, {polling: true})getListCoinBinance();function getListCoinBinance() {    for (let XXX in listcoinBNB.listCBNB) {        let scoin = listcoinBNB.listCBNB[XXX];        getRSIValBinance(scoin);    }}function closeSocket(scoin) {    binance.websockets.terminate(`${scoin}@kline_15m`);}function getRSIValBinance(scoin) {    setTimeout(function () {        binance.websockets.chart(scoin, "30m", (symbol, interval, chart) => {            let keys = Object.keys(chart);            /**             * Check RSI             */            let love50st = R.takeLast(50, keys);            let RsiArr = [];            love50st.forEach(function (entry) {                RsiArr.push(chart[entry]);            });            let listClosePrice = _.map(RsiArr, 'close');            let listHighPrice = _.map(RsiArr, 'high');            let listLowPrice = _.map(RsiArr, 'low');            /**             * Cal BB26             */            let closePrice = [];            love50st.forEach(function (entry) {                closePrice.push(Number(chart[entry].close));            });            Promise.all([checkRSI(listClosePrice),                checkStock(listHighPrice, listLowPrice, listClosePrice),                checkBBMid(closePrice),                checkBBDown(closePrice, 3),                checkBBDown(closePrice, 4)]).then((values) => {                /**                 * Lay data neu thoa man candle & RSI                 */                const _rsi = Number(values[0]);                const _stock = Number(values[1]);                const _bbmid = Number(values[2]);                const _bb3 = Number(values[3]);                const _bb4 = Number(values[4]);                console.log(`Coin name : ${scoin}                             _rsi : ${_rsi}                            _stock : ${_stock}                            _bbmid : ${_bbmid}                            _bb3 : ${_bb3}                            _bb4 : ${_bb4}                            `)                if (_rsi <= 30 && _stock <= 20) {                    //last time                    let tick = binance.last(chart);                    const last = Number(chart[tick].close);                    const volume = chart[tick].volume;                    if (volume > 50) {                        if ((_bbmid === last) || (last <= _bb3) || (last <= _bb4)) {                            console.log(`🚀 #${scoin} 🚀                                        ⚡ Giá : ${last}                                         🔗 https://www.binance.com/tradeDetail.html?symbol=${scoin}                                        ⚠ Lưu ý: chỉ mua giá hiện tại hoặc giá thấp hơn, không nên mua giá cao hơn.`);                            bot.sendMessage('218238495', `🚀 #${scoin} 🚀                                            ⚡ Giá : ${last}                                             🔗 https://www.binance.com/tradeDetail.html?symbol=${scoin}                                            ⚠ Lưu ý: chỉ mua giá hiện tại hoặc giá thấp hơn, không nên mua giá cao hơn.`);                        }                    }                } else {                    //console.log(`${scoin} Không đủ điều kiện RSI và Stock !`);                    closeSocket(scoin);                }            }, function () {                console.log('He thong co van de.')            });        });    }, 5000)};/** * Check RSI * @param listclosePrice * @returns {Promise<*>} */async function checkRSI(listclosePrice) {    let inputRSI = {        values: listclosePrice,        period: 14    };    let RSTvl = _.last(RSI.calculate(inputRSI));    return RSTvl;}/** * Check Stock * @param high * @param low * @param close * @returns {Promise<string>} */async function checkStock(high, low, close) {    let period = 14;    let signalPeriod = 3;    let input = {        high: high,        low: low,        close: close,        period: period,        signalPeriod: signalPeriod    };    let stochastic = _.last(Stochastic.calculate(input));    return stochastic.d.toFixed(2);}/** * Check BB Mid 2 * @returns {Promise<void>} */async function checkBBMid(values) {    let input = {        period: 20,        values: values,        stdDev: 2    };    let rs = R.last(BollingerBand.calculate(input));    return parseFloat(rs.middle).toFixed(8);}/** * Check BBDown * @param period * @param stdDev * @param values * @returns {Promise<string>} */async function checkBBDown(values, stdDev) {    let rsv;    let input = {        period: 20,        values: values,        stdDev: stdDev    };    rsv = R.last(BollingerBand.calculate(input));    return parseFloat(rsv.lower).toFixed(8);}