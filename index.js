const binance = require('node-binance-api');const listcoinBNB = require('./listcoinbinance');const BB = require('technicalindicators').BollingerBands;const RSI = require('technicalindicators').RSI;const R = require('ramda');const _ = require('lodash');const moment = require('moment');const TelegramBot = require('node-telegram-bot-api');const fs = require('fs');const Stochastic = require('technicalindicators').Stochastic;const StochasticRSI = require('technicalindicators').StochasticRSI;/** * Config bot telegram * @type {string} */const token = '472833515:AAGXIRPigpyRKgO1NfLCPXBJ3R-5twUKBNw';const bot = new TelegramBot(token, {polling: true})getListCoinBinance();function getListCoinBinance() {    for (let XXX in listcoinBNB.listCBNB) {        let scoin = listcoinBNB.listCBNB[XXX];        getRSIValBinance(scoin);    }}function getRSIValBinance(scoin) {    setTimeout(function () {        binance.candlesticks(scoin, "30m", (error, ticks, symbol) => {            if (error) {                console.log(error);            }            let listclosePrice = _.map(ticks, 4);            let listhighPrice = _.map(ticks, 2);            let listlowPrice = _.map(ticks, 3);            Promise.all([checkRSI(listclosePrice), checkStock(listhighPrice, listlowPrice, listclosePrice), checkBBMid(listclosePrice), checkBBDown(listclosePrice, 3), checkBBDown(listclosePrice, 4)]).then((values) => {                const _rsi = values[0];                const _stock = values[1];                const _bbmid = values[2];                const _bb3 = values[3];                const _bb4 = values[4];                if (_rsi <= 30 && _stock <= 20) {                    console.log(`inra ${_rsi} & ${_stock}}`)                }            });        })    }, 1000)};async function checkRSI(listclosePrice) {    let inputRSI = {        values: listclosePrice,        period: 14    };    let RSTvl = _.last(RSI.calculate(inputRSI));    return RSTvl;}async function checkStock(high, low, close) {    let period = 14;    let signalPeriod = 3;    let input = {        high: high,        low: low,        close: close,        period: period,        signalPeriod: signalPeriod    };    let stochastic = _.last(Stochastic.calculate(input));    return stochastic.d.toFixed(2);}/** * Check BB Mid 2 * @returns {Promise<void>} */async function checkBBMid(values) {    let rs;    let input = {        period: 20,        values: values,        stdDev: 2    }    rs = R.last(BB.calculate(input));    return parseFloat(rs.lower).toFixed(8);}/** * Check BBDown * @param period * @param stdDev * @param values * @returns {Promise<string>} */async function checkBBDown(values, stdDev) {    let rsv;    let input = {        period: 20,        values: values,        stdDev: stdDev    }    rsv = R.last(BB.calculate(input));    return parseFloat(rsv.lower).toFixed(8);}